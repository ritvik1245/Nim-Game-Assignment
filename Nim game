
import time, random, sys

""""
Ritvik Donga - Nim Game - Due Wednesday, October 23, 2024

Two player strategy and math game. Compete against a friend to pick counters out of piles until there is only one left.
The player who picks up the last counter loses.

"""

def slow_text(text): # slows the speed at which the text outputs to make it easier to read.
    for char in text:
        print(char,end='',flush=True)
        time.sleep(0.02)
    
def draw_image(text): # same as previous function but interval in between characters is shorter. Used for ASCII art only.
    for char in text:
        print(char,end='',flush=True)
        time.sleep(0.001)

def color_reset(): # Resets the color of the text to the original color. In a function to make the code easier to read. Other codes used in the program are for different colours. 
    print("\u001b[0m")

# Sets number of coins per pile at the beginning of each game
counter_piles = [0, int(random.randint(8,11)), int(random.randint(7,10)), int(random.randint(6,9)), int(random.randint(5,8)), int(random.randint(4,7))]

# lines 29 - 110, Player 1's turn. Player 1 and Player 2 turns are identical in terms of their function, so all comments under player 1's turn apply to Player 2's turn as well. 
def player_1_turn():
    slow_text(f"\n{player_1} plays: ")
    slow_text("\nCurrent coin piles:")
    # Displays the current state of the piles:
    slow_text(f"\n\u001b[31mPile One: {counter_piles[1]}" + f"    \u001b[33m Pile Two: {counter_piles[2]}" + f"    \u001b[32m Pile Three: {counter_piles[3]}" + f"    \u001b[34m Pile Four: {counter_piles[4]}" + f"    \u001b[35m Pile Five: {counter_piles[5]}\n")
    color_reset()
    slow_text("\u001b[36mWhich pile would you like to pick from? (Please input a number only)")
    # Multiple checks to see if the moves are valid:
    while True:
        player_1_pile_choice = int(input(" \nCoin Pile: "))
        if player_1_pile_choice > 5 or player_1_pile_choice < 1:
            slow_text("\n\u001b[41;1mThat is not a valid pile. Choose again. ")
            color_reset()
        elif counter_piles[player_1_pile_choice] <= 0:
            slow_text("\n\u001b[41;1mThat pile is empty! Choose another. ")
            color_reset()
        else:
            break
    slow_text("\nHow many coins will you take from that pile?")
    while True:
        player_1_coins_removed = int(input(" \nNumber of coins: "))
        if player_1_coins_removed > counter_piles[player_1_pile_choice]:
            slow_text("\n\u001b[41;1mThere aren't enough coins in that pile! Please try again. ")
            color_reset()
        else:
            break
    color_reset()

    counter_piles[player_1_pile_choice] -= player_1_coins_removed
    total = sum(counter_piles) # Calculates total coins in all piles after every move. 
    # If and elif statements to check if the game is over:
    if total > 0:
        slow_text(f"\u001b[31;1m{player_1} removed {player_1_coins_removed} coins from pile {player_1_pile_choice}.")
        color_reset()
    elif total < 1:
        time.sleep(1.5)
        slow_text(f"\nThe final coins were removed from the pile by {player_1}. ")
        slow_text("\nThe winner is")
        for i in range(5):
            slow_text(".")
            time.sleep(0.8)
        slow_text(f"\n{player_2}!")
        time.sleep(1.5)
        draw_image('''\n\u001b[33;1m*******************************************************************************
                |                   |                  |                     |
        _________|________________.=""_;=.______________|_____________________|_______
        |                   |  ,-"_,=""     `"=.|                  |
        |___________________|__"=._o`"-._        `"=.______________|___________________
                |                `"=._o`"=._      _`"=._                     |
        _________|_____________________:=._o "=._."_.-="'"=.__________________|_______
        |                   |    __.--" , ; `"=._o." ,-"""-._ ".   |
        |___________________|_._"  ,. .` ` `` ,  `"-._"-._   ". '__|___________________
                |           |o`"=._` , "` `; .". ,  "-._"-._; ;              |
        _________|___________| ;`-.o`"=._; ." ` '`."\` . "-._ /_______________|_______
        |                   | |o;    `"-.o`"=._``  '` " ,__.--o;   |
        |___________________|_| ;     (#) `-.o `"=.`_.--"_o.-; ;___|___________________
        ____/______/______/___|o;._    "      `".o|o_.--"    ;o;____/______/______/____
        /______/______/______/_"=._o--._        ; | ;        ; ;/______/______/______/_
        ____/______/______/______/__"=._o--._   ;o|o;     _._;o;____/______/______/____
        /______/______/______/______/____"=._o._; | ;_.--"o.--"_/______/______/______/_
        ____/______/______/______/______/_____"=.o|o_.--""___/______/______/______/____
        /______/______/______/______/______/______/______/______/______/______/[TomekK]
        *******************************************************************************''')
        color_reset()
        slow_text(f"\n{player_2} takes all of the coins.")
        while True:
            play_again_selection = input("\nWould you like to play again or exit game? ('play again'/'exit') ")
            if play_again_selection == "play again" or play_again_selection == "exit":
                break
            else:
                slow_text("\nInvalid selection, please choose again. ")
        if play_again_selection == "play again":
            # Resets coin piles before starting the game again
            counter_piles[1] =+ (random.randint(8,11))
            counter_piles[2] =+ (random.randint(7,10))
            counter_piles[3] =+ (random.randint(6,9))
            counter_piles[4] =+ (random.randint(5,8))
            counter_piles[5] =+ (random.randint(4,7))
            
        elif play_again_selection == "exit":
            slow_text("Thank you for playing Nim game!")
            sys.exit()

# lines 113 - 190 , Player 2's turn:
def player_2_turn():
    slow_text(f"\n{player_2} plays: ")
    slow_text("\nCurrent coin piles:")
    slow_text(f"\n\u001b[31mPile One: {counter_piles[1]}" + f"    \u001b[33m Pile Two: {counter_piles[2]}" + f"    \u001b[32m Pile Three: {counter_piles[3]}" + f"    \u001b[34m Pile Four: {counter_piles[4]}" + f"    \u001b[35m Pile Five: {counter_piles[5]}\n")
    color_reset()
    slow_text("\u001b[36mWhich pile would you like to pick from? (Please input a number only)") 
    while True:
        player_2_pile_choice = int(input(" \nCoin Pile: "))
        if player_2_pile_choice > 5 or player_2_pile_choice < 1:
            slow_text("\n\u001b[41;1mThat is not a valid pile. Choose again. ")
            color_reset()
        elif counter_piles[player_2_pile_choice] <= 0:
            slow_text("\n\u001b[41;1mThat pile is empty! Choose another. ")
            color_reset()
        else:
            break
    slow_text("\nHow many coins will you take from that pile?")
    while True:
        player_2_coins_removed = int(input(" \nNumber of coins: "))
        if player_2_coins_removed > counter_piles[player_2_pile_choice]:
            slow_text("\n\u001b[41;1mThere aren't enough coins in that pile! Please try again. ")
            color_reset()
        else:
            break
    color_reset()

    counter_piles[player_2_pile_choice] -= player_2_coins_removed
    total = sum(counter_piles)
    if total > 0:
        slow_text(f"\u001b[31;1m{player_2} removed {player_2_coins_removed} coins from pile {player_2_pile_choice}.")
        color_reset()
    elif total == 0:
        time.sleep(1.5)
        slow_text(f"\n\u001b[1mThe final coins were removed from the pile by {player_2}. ")
        slow_text("\nThe winner is")
        for i in range(5):
            slow_text(".")
            time.sleep(0.8)
        slow_text(f"\n{player_1}!")
        time.sleep(1.5)
        draw_image('''\n\u001b[33;1m*******************************************************************************
                |                   |                  |                     |
        _________|________________.=""_;=.______________|_____________________|_______
        |                   |  ,-"_,=""     `"=.|                  |
        |___________________|__"=._o`"-._        `"=.______________|___________________
                |                `"=._o`"=._      _`"=._                     |
        _________|_____________________:=._o "=._."_.-="'"=.__________________|_______
        |                   |    __.--" , ; `"=._o." ,-"""-._ ".   |
        |___________________|_._"  ,. .` ` `` ,  `"-._"-._   ". '__|___________________
                |           |o`"=._` , "` `; .". ,  "-._"-._; ;              |
        _________|___________| ;`-.o`"=._; ." ` '`."\` . "-._ /_______________|_______
        |                   | |o;    `"-.o`"=._``  '` " ,__.--o;   |
        |___________________|_| ;     (#) `-.o `"=.`_.--"_o.-; ;___|___________________
        ____/______/______/___|o;._    "      `".o|o_.--"    ;o;____/______/______/____
        /______/______/______/_"=._o--._        ; | ;        ; ;/______/______/______/_
        ____/______/______/______/__"=._o--._   ;o|o;     _._;o;____/______/______/____
        /______/______/______/______/____"=._o._; | ;_.--"o.--"_/______/______/______/_
        ____/______/______/______/______/_____"=.o|o_.--""___/______/______/______/____
        /______/______/______/______/______/______/______/______/______/______/[TomekK]
        *******************************************************************************''')
        color_reset()
        slow_text(f"\n{player_1} takes all of the coins.")
        while True:
            play_again_selection = input("\nWould you like to play again or exit game? ('play again'/'exit')")
            if play_again_selection == "play again" or play_again_selection == "exit":
                break
            else:
                slow_text("\nInvalid selection, please choose again. ")
        if play_again_selection == "play again":
            counter_piles[1] =+ (random.randint(8,11))
            counter_piles[2] =+ (random.randint(7,10))
            counter_piles[3] =+ (random.randint(6,9))
            counter_piles[4] =+ (random.randint(5,8))
            counter_piles[5] =+ (random.randint(4,7))
            
        elif play_again_selection == "exit":
            slow_text("Thank you for playing Nim game!")
            sys.exit()

# Lines 193 - 166, AI turn:
def nimbot_turn():
    slow_text(f"\n{player_2} plays: ")
    slow_text("\nCurrent coin piles:")
    slow_text(f"\n\u001b[31mPile One: {counter_piles[1]}" + f"    \u001b[33m Pile Two: {counter_piles[2]}" + f"    \u001b[32m Pile Three: {counter_piles[3]}" + f"    \u001b[34m Pile Four: {counter_piles[4]}" + f"    \u001b[35m Pile Five: {counter_piles[5]}\n")
    color_reset()
    # Chooses a random pile and number of coins to remove and checks if those moves are valid. If they are not, rerolls the number until it is valid.
    while True:
        nimbot_pile_choice = int(random.randint(1,5))
        if counter_piles[nimbot_pile_choice] < 1:
            print('')
        else:
            break
    while True:
        nimbot_coins_removed = int(random.randint(1,5))
        if nimbot_coins_removed > counter_piles[nimbot_pile_choice]:
            print('')
        else:
            break
    # The above is the only difference from the Player turns. Other comments from player 1's turn apply here as well. 
    
    color_reset()
    counter_piles[nimbot_pile_choice] -= nimbot_coins_removed
    total = sum(counter_piles)
    if total > 0:
        slow_text(f"\u001b[31;1m{player_2} removed {nimbot_coins_removed} coins from pile {nimbot_pile_choice}.")
        color_reset()
    elif total == 0:
        time.sleep(1.5)
        slow_text(f"\n\u001b[1mThe final coins were removed from the pile by {player_2}. ")
        slow_text("\nThe winner is")
        for i in range(5):
            slow_text(".")
            time.sleep(0.8)
        slow_text(f"\n{player_1}!")
        time.sleep(1.5)
        draw_image('''\n\u001b[33;1m
        *******************************************************************************
                |                   |                  |                     |
        _________|________________.=""_;=.______________|_____________________|_______
        |                   |  ,-"_,=""     `"=.|                  |
        |___________________|__"=._o`"-._        `"=.______________|___________________
                |                `"=._o`"=._      _`"=._                     |
        _________|_____________________:=._o "=._."_.-="'"=.__________________|_______
        |                   |    __.--" , ; `"=._o." ,-"""-._ ".   |
        |___________________|_._"  ,. .` ` `` ,  `"-._"-._   ". '__|___________________
                |           |o`"=._` , "` `; .". ,  "-._"-._; ;              |
        _________|___________| ;`-.o`"=._; ." ` '`."\` . "-._ /_______________|_______
        |                   | |o;    `"-.o`"=._``  '` " ,__.--o;   |
        |___________________|_| ;     (#) `-.o `"=.`_.--"_o.-; ;___|___________________
        ____/______/______/___|o;._    "      `".o|o_.--"    ;o;____/______/______/____
        /______/______/______/_"=._o--._        ; | ;        ; ;/______/______/______/_
        ____/______/______/______/__"=._o--._   ;o|o;     _._;o;____/______/______/____
        /______/______/______/______/____"=._o._; | ;_.--"o.--"_/______/______/______/_
        ____/______/______/______/______/_____"=.o|o_.--""___/______/______/______/____
        /______/______/______/______/______/______/______/______/______/______/[TomekK]
        *******************************************************************************''')
        color_reset()
        slow_text(f"\n{player_1} takes all of the coins.")
        while True:
            play_again_selection = input("\nWould you like to play again or exit game? ('play again'/'exit')")
            if play_again_selection == "play again" or play_again_selection == "exit":
                break
            else:
                slow_text("\nInvalid selection, please choose again. ")
        if play_again_selection == "play again":
            counter_piles[1] =+ (random.randint(8,11))
            counter_piles[2] =+ (random.randint(7,10))
            counter_piles[3] =+ (random.randint(6,9))
            counter_piles[4] =+ (random.randint(5,8))
            counter_piles[5] =+ (random.randint(4,7))
            
        elif play_again_selection == "exit":
            slow_text("Thank you for playing Nim game!")
            sys.exit()





# Game script starts here (lines 275 - 316):

# Loading bar:
while True:
    slow_text("\nLoading game...")
    slow_text("\n[")
    for i in range(20):
        slow_text("🟩")
        time.sleep(0.1)
    slow_text(" ]")

# Game instructions: 
    color_reset()
    slow_text("""\nWelcome to the game of Nim!
    \nIn this game, you and a friend take turns picking gold coins out of five piles.
    You may only pick from one pile per turn but you can pick as many coins from that pile as you want
    The player who picks the very last coin loses and the winning player keeps all of the coins!
    \nGood luck and have fun!\n""")
    time.sleep(2)

# Opponent selection:
    while True:
        opponent_selection = input("\nWould you like to play against a friend or NimBot? ('friend'/'Nimbot') ").lower()
        if opponent_selection == "friend" or opponent_selection == "nimbot":
            break
        else:
            slow_text("\nInvalid selection, please choose again.")

    player_1 = input("\nPlayer 1, enter your name: ")
    slow_text(f"\nHello {player_1}! \n")
    time.sleep(1)

    if opponent_selection == "friend":
        player_2 = input("\nPlayer 2, enter your name: \n")
        slow_text(f"\nHello {player_2}! \n")

        while True:
            player_1_turn()
            player_2_turn()

    elif opponent_selection == "nimbot":
        player_2 = "Nimbot"
        while True:
            player_1_turn()
            nimbot_turn()
